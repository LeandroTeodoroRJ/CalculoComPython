(K367_math) leandro[~]$python3
Python 3.6.7 (default, Oct 22 2018, 11:32:17) 
[GCC 8.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 
>>> from sympy import *
>>> init_printing()
>>> 
>>> # MATRIZES COM PYTHON
>>> # Declarando matrizes
>>> # Matrix linha
>>> A = Matrix([[1,2,3]])
>>> A
[1  2  3]
>>>
>>> # Matrix coluna
>>> B = Matrix([4,5,6])
>>> B
⎡4⎤
⎢ ⎥
⎢5⎥
⎢ ⎥
⎣6⎦
>>> 
>>> # Matrix 3x3
>>> C = Matrix([[1,2,3],[4,5,6],[7,8,9]])
>>> C
⎡1  2  3⎤
⎢       ⎥
⎢4  5  6⎥
⎢       ⎥
⎣7  8  9⎦
>>> 
>>>
>>> # Matriz Identidade
>>> I = eye(3)
>>> I
⎡1  0  0⎤
⎢       ⎥
⎢0  1  0⎥
⎢       ⎥
⎣0  0  1⎦
>>> 
>>>
>>> # Matrix Inversa (Calculando a inversa de D)
>>> D = Matrix([[1,2,7],[0,3,1],[0,5,2]])
>>> D
⎡1  2  7⎤
⎢       ⎥
⎢0  3  1⎥
⎢       ⎥
⎣0  5  2⎦
>>> Inv = D**-1
>>> Inv
⎡1  31  -19⎤
⎢          ⎥
⎢0  2   -1 ⎥
⎢          ⎥
⎣0  -5   3 ⎦
>>> 
>>>
>>> # Transposta de D
>>> D
⎡1  2  7⎤
⎢       ⎥
⎢0  3  1⎥
⎢       ⎥
⎣0  5  2⎦
>>>
>>> D.T
⎡1  0  0⎤
⎢       ⎥
⎢2  3  5⎥
⎢       ⎥
⎣7  1  2⎦
>>>
>>> Transpose(D)
           T
⎛⎡1  2  7⎤⎞ 
⎜⎢       ⎥⎟ 
⎜⎢0  3  1⎥⎟ 
⎜⎢       ⎥⎟ 
⎝⎣0  5  2⎦⎠ 
>>> 
>>>
>>> # OPERAÇÔES
>>> # Multiplicação por um escalar
>>> k = 2
>>> k*D
⎡2  4   14⎤
⎢         ⎥
⎢0  6   2 ⎥
⎢         ⎥
⎣0  10  4 ⎦
>>> 
>>> # Multiplicação de Matrizes
>>> A
[1  2  3]
>>> B
⎡4⎤
⎢ ⎥
⎢5⎥
⎢ ⎥
⎣6⎦
>>> A*B
[32]
>>> 
>>> # Soma de Matrizes
>>> C
⎡1  2  3⎤
⎢       ⎥
⎢4  5  6⎥
⎢       ⎥
⎣7  8  9⎦
>>> D
⎡1  2  7⎤
⎢       ⎥
⎢0  3  1⎥
⎢       ⎥
⎣0  5  2⎦
>>> C+D
⎡2  4   10⎤
⎢         ⎥
⎢4  8   7 ⎥
⎢         ⎥
⎣7  13  11⎦
>>> 
>>>
>>> # DETERMINANTE
>>> E = Matrix([[1,3,4],[5,2,-3],[1,4,2]])
>>> E
⎡1  3  4 ⎤
⎢        ⎥
⎢5  2  -3⎥
⎢        ⎥
⎣1  4  2 ⎦
>>> 
>>> det(E)
49
>>> 
>>>
>>> # OUTROS
>>> # Retornar um elemento da Matriz
>>> C
⎡1  2  3⎤
⎢       ⎥
⎢4  5  6⎥
⎢       ⎥
⎣7  8  9⎦
>>> 
>>> # Retorna o terceiro elemento, na sequência, linha 2 com coluna 1 
>>> C[3]  
4
>>> # Retorna o elemento da Primeira linha com Segunda coluna 
>>> C[0,1]
2
>>>
>>># Retornar as dimensões(formato) da matriz
>>> B
[4]
[ ]
[5]
[ ]
[6]
>>> import numpy as np
>>> np.shape(B)
(3, 1)
>>> type(_)
<class 'tuple'>
>>> 
>>> # Retornar o valor médio de uma matriz ou array de valores
>>> A
[1  2  3]
>>> numpy.mean(A)
2
>>> numpy.mean(C)
5
>>> 
'''
OBS: Pelo método de fatiamento também é possível retornar valores de uma matriz:
Dado que i,j,k são números inteiros e sabendo que temos a formatação
start:stop:step
Temos que cada linha retorna:
A[:,:] toda a matriz;
A[i:j,k] os elementos da linha i até j da k-ésima coluna;
A[i,j:k] os elementos da linha i-ésima linha das colunas j até k;
A[i,:] a i-ésima linha da matriz
A[:,j] a j-ésima coluna da matriz
'''


